"""
Урок 4. Полезные инструменты
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""
import sys
import argparse


def createParser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-production', type=int, nargs='?', required=True, help='выработка в часах')
    parser.add_argument('-tariff', type=int, nargs='?', required=True, help='ставка в час')
    parser.add_argument('-bonus', type=int, nargs='?', help='премия', default="0")
    return parser


parser = createParser()
a = parser.parse_args(sys.argv[1:])
print(a.production)
print(f"ЗП сотрудника = {(a.production * a.tariff) + (a.production * a.tariff) * a.bonus / 100}")
# python.exe l4.py -production=10 -tariff=20 -bonus=5

"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

l: list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result: list = [l[i] for i in range(1, len(l)) if l[i] > l[i - 1]]
print(result)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""
print([i for i in range(20, 240 + 1) if not i % 20 or not i % 21])

"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""
l: list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = []
result += [i for i in l if i not in result and result.append(i)]
print(result)

"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""
from functools import reduce

print(reduce(lambda x, y: x * y, range(100, 1001)))

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""
from itertools import count, cycle


def cGenerator(end: int = 10, start: int = None, lst: list = None):
    if (start and lst):
        return 0
    elif (start):
        for i in count(start - 1):
            if i < end:
                yield i + 1
    elif (lst):
        cnt = 0
        for i in cycle(lst):
            if cnt >= end:
                break
            yield i
            cnt += 1
    else:
        return 0


g = cGenerator(lst=[2, 4, 3, 1], end=20)
for i in g:
    print(i)

g = cGenerator(start=2, end=20)
for i in g:
    print(i)

"""
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор.
Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""
from itertools import count


def fact(end: int = 4):
    start = 1
    fct = 1
    while start <= end:
        yield fct
        start = start + 1
        fct = fct * start


func = fact(4)
for el in func:
    print(el)
